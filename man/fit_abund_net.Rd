% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_abund_net.R
\name{fit_abund_net}
\alias{fit_abund_net}
\title{Fit and validate Artificial Neural Network models}
\usage{
fit_abund_net(
  data,
  response,
  predictors,
  predictors_f = NULL,
  fit_formula = NULL,
  partition,
  predict_part = FALSE,
  size,
  decay = 0,
  verbose = TRUE
)
}
\arguments{
\item{data}{tibble or data.frame. Database with response, predictors, and partition values}

\item{response}{character. Column name with species abundance.}

\item{predictors}{character. Vector with the column names of quantitative predictor variables (i.e. continuous variables). Usage predictors = c("temp", "precipt", "sand")}

\item{predictors_f}{character. Vector with the column names of qualitative predictor variables (i.e. ordinal or nominal variables type). Usage predictors_f = c("landform")}

\item{fit_formula}{formula. A formula object with response and predictor variables (e.g. formula(abund ~ temp + precipt + sand + landform)). Note that the variables used here must be consistent with those used in response, predictors, and predictors_f arguments. Default NULL}

\item{partition}{character. Column name with training and validation partition groups.}

\item{predict_part}{logical. Save predicted abundance for testing data. Default is FALSE.}

\item{size}{numerical. The size of the hidden layer.}

\item{decay}{numerial. Value for weight decay. Default 0.}

\item{verbose}{logical. If FALSE, disables all console messages. Default TRUE}
}
\value{
A list object with:
\itemize{
\item model: A "ksvm" class object from kernlab package. This object can be used for predicting.
\item predictors: A tibble with quantitative (c column names) and qualitative (f column names) variables use for modeling.
\item performance: Averaged performance metrics (see \code{\link{adm_eval}}).
\item performance_part: Performance metrics for each replica and partition.
\item predicted_part: Observed and predicted abundance for each test partition.
}
}
\description{
Fit and validate Artificial Neural Network models
}
\examples{
\dontrun{
require(dplyr)

data("sppabund")

some_sp <- sppabund \%>\%
  filter(species == "Species one")

net_1 <- fit_abund_net(
  data = some_sp,
  response = "ind_ha",
  predictors = c("bio12","elevation","sand"),
  predictors_f = c("eco"),
  partition = ".part",
  size = 32,
  decay = 0.01,
  predict_part = TRUE
)

net_1$model
net_1$predicted_part
net_1$performance_part
net_1$performance
net_1$predictors
}
}
