% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_abund_raf.R
\name{fit_abund_raf}
\alias{fit_abund_raf}
\title{Fit and validate Random Forests models}
\usage{
fit_abund_raf(
  data,
  response,
  predictors,
  predictors_f = NULL,
  fit_formula = NULL,
  partition,
  predict_part = FALSE,
  mtry = length(c(predictors, predictors_f))/3,
  ntree = 500,
  verbose = TRUE
)
}
\arguments{
\item{data}{tibble or data.frame. Database with response, predictors, and partition values}

\item{response}{character. Column name with species abundance.}

\item{predictors}{character. Vector with the column names of quantitative predictor variables (i.e. continuous variables). Usage predictors = c("temp", "precipt", "sand")}

\item{predictors_f}{character. Vector with the column names of qualitative predictor variables (i.e. ordinal or nominal variables type). Usage predictors_f = c("landform")}

\item{fit_formula}{formula. A formula object with response and predictor variables (e.g. formula(abund ~ temp + precipt + sand + landform)). Note that the variables used here must be consistent with those used in response, predictors, and predictors_f arguments. Default NULL}

\item{partition}{character. Column name with training and validation partition groups.}

\item{predict_part}{logical. Save predicted abundance for testing data. Default is FALSE.}

\item{mtry}{numeric. Number of variables randomly sampled as candidates at each split. Default (length(c(predictors, predictors_f))/3)}

\item{ntree}{numeric. Number of trees to grow. This should not be set to too small a number, to ensure that every input row gets predicted at least a few times. Default 500}
}
\value{
A list object with:
\itemize{
\item model: A "randomForest" class object from randomForest package. This object can be used for predicting.
\item predictors: A tibble with quantitative (c column names) and qualitative (f column names) variables use for modeling.
\item performance: Averaged performance metrics (see \code{\link{adm_eval}}).
\item performance_part: Performance metrics for each replica and partition.
\item predicted_part: Observed and predicted abundance for each test partition.
}
}
\description{
Fit and validate Random Forests models
}
\examples{
\dontrun{
require(terra)
require(gamlss)

# Datasbase with species abundance and x and y coordinates
data("sppabund")

# Raster data with environmental variables
envar <- system.file("external/envar.tif", package = "adm")
envar <- terra::rast(envar)

# Extract data for a single species
some_sp <- sppabund \%>\%
  filter(species == "Species one") \%>\% 
  dplyr::select(species, ind_ha, x, y,.part )

# Extract environmental data from envar raster for all locations in spp
some_sp <-
  adm_extract(
    data = some_sp,
    x = "x",
    y = "y",
    env_layer = envar,
    variables = NULL,
    filter_na = FALSE
  )

some_sp

# Explor reponse variables
some_sp$ind_ha \%>\% range
some_sp$ind_ha \%>\% hist

# Here we will roudn data to the nearest integer
some_sp <- some_sp \%>\% adm_transform("ind_ha", "log1")
some_sp \%>\% dplyr::select(ind_ha, ind_ha_log)

# Explore different family distributions
family_selector(data = some_sp, response = "ind_ha_log1") 

# Fit a GAM model
mgam <- fit_abund_gam(
  data = some_sp,
  response = "ind_ha_log1",
  predictors = c("elevation", "sand", "bio3", "bio12"),
  sigma_formula = ~ elevation + bio3 + bio12,
  predictors_f = NULL,
  partition = ".part",
  distribution = gamlss.dist::NO())

mgam

}
}
