% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_abund_glm.R
\name{fit_abund_glm}
\alias{fit_abund_glm}
\title{Fit and validate Generalized Linear Models}
\usage{
fit_abund_glm(
  data,
  response,
  predictors,
  predictors_f = NULL,
  fit_formula = NULL,
  sigma_formula = ~1,
  nu_formula = ~1,
  tau_formula = ~1,
  partition,
  predict_part = FALSE,
  distribution = NULL,
  poly = 0,
  inter_order = 0,
  control_gamlss = gamlss.control(trace = FALSE),
  verbose = TRUE
)
}
\arguments{
\item{data}{tibble or data.frame. Database with response, predictors, and partition values}

\item{response}{character. Column name with species abundance.}

\item{predictors}{character. Vector with the column names of quantitative predictor variables (i.e. continuous variables). Usage predictors = c("temp", "precipt", "sand")}

\item{predictors_f}{character. Vector with the column names of qualitative predictor variables (i.e. ordinal or nominal variables type). Usage predictors_f = c("landform")}

\item{fit_formula}{formula. A formula object with response and predictor variables (e.g. formula(abund ~ temp + precipt + sand + landform)). Note that the variables used here must be consistent with those used in response, predictors, and predictors_f arguments. Default NULL}

\item{sigma_formula}{formula. formula for fitting a model to the nu parameter. Usage sigma_formula = ~ precipt + temp}

\item{nu_formula}{formula. formula for fitting a model to the nu parameter. Usage nu_formula = ~ precipt + temp}

\item{tau_formula}{formula. formula for fitting a model to the tau parameter. Usage tau_formula = ~ precipt + temp}

\item{partition}{character. Column name with training and validation partition groups.}

\item{predict_part}{logical. Save predicted abundance for testing data. Default is FALSE.}

\item{distribution}{character. A string specifying the distribution to be used. See \link[gamlss.dist]{gamlss.family} documentation for details. Use distribution = gamlss.dist::NO(). Default NULL}

\item{poly}{integer >= 2. If used with values >= 2 model will use polynomials for those continuous variables (i.e. used in predictors argument). Default is 0.}

\item{inter_order}{integer >= 0. The interaction order between explanatory variables. Default is 0.}

\item{control_gamlss}{function. control parameters of the outer iterations algorithm in gamlss
See \link[gamlss]{gamlss.control} documentation for details. Default gamlss.control()}

\item{verbose}{logical. If FALSE, disables all console messages. Default TRUE}
}
\value{
A list object with:
\itemize{
\item model: A "gamlss" class object from gamlss package. This object can be used for predicting.
\item predictors: A tibble with quantitative (c column names) and qualitative (f column names) variables use for modeling.
\item performance: Averaged performance metrics (see \code{\link{adm_eval}}).
\item performance_part: Performance metrics for each replica and partition.
\item predicted_part: Observed and predicted abundance for each test partition.
}
}
\description{
Fit and validate Generalized Linear Models
}
\examples{
\dontrun{
require(dplyr)
data("sppabund")

some_sp <- sppabund \%>\%
  filter(species == "Species one")

glm_1 <- fit_abund_glm(
  data = some_sp,
  response = "ind_ha",
  predictors = c("bio12","elevation","sand"),
  predictors_f = c("eco"),
  partition = ".part",
  distribution = "NO",
  poly = 0,
  inter_order = 0,
  predict_part = TRUE
)

glm_1$model
glm_1$predicted_part
glm_1$performance_part
glm_1$performance
glm_1$predictors

# Using second order polynomials and first order interaction terms
glm_2 <- fit_abund_glm(
  data = some_sp,
  response = "ind_ha",
  predictors = c("bio12","elevation","sand"),
  predictors_f = c("eco"),
  partition = ".part",
  distribution = "NO",
  poly = 2,
  inter_order = 1,
  predict_part = TRUE
)

glm_2$model
glm_2$predicted_part
glm_2$performance_part
glm_2$performance
glm_2$predictors

# Using third order polynomials and second order interaction terms
glm_3 <- fit_abund_glm(
  data = some_sp,
  response = "ind_ha",
  predictors = c("bio12","elevation","sand"),
  predictors_f = c("eco"),
  partition = ".part",
  distribution = "NO",
  poly = 3,
  inter_order = 2,
  predict_part = TRUE
)

glm_3$model
glm_3$predicted_part
glm_3$performance_part
glm_3$performance
glm_3$predictors

# Setting formulas for different distribution parameters
glm_4 <- fit_abund_glm(
  data = some_sp,
  response = "ind_ha",
  predictors = c("bio12","elevation","sand"),
  predictors_f = c("eco"),
  partition = ".part",
  distribution = "NO",
  fit_formula = ind_ha ~ bio12 + elevation + sand + eco,
  sigma_formula = ind_ha ~ bio12 + elevation + sand,
  poly = 0,
  inter_order = 0,
  predict_part = TRUE
)

glm_4$model
glm_4$predicted_part
glm_4$performance_part
glm_4$performance
glm_4$predictors
}
}
