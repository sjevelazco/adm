% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adm_trasform.R
\name{adm_transform}
\alias{adm_transform}
\title{Performs data transformation on a variable based on the specified method.}
\usage{
adm_transform(data, variable, method, inverse = FALSE, t_terms = NULL)
}
\arguments{
\item{data}{A data.frame, tibble, or SpatRaster containing the data.}

\item{variable}{A character string specifying the variable (column) to be transformed.}

\item{method}{A character string specifying the method to be used for transformation. Available methods are "01", "zscore", "log", and "round."
\itemize{
\item For "01", it scales the variable between 0 and 1 using the formula (x - min(x)) (max(x) - min(x)).
\item For "zscore", it standardizes the variable by subtracting the mean and dividing by the standard deviation.
\item For "log", it applies natural logarithm transformation to the variable.
\item For "log1", it sums 1 and then applies natural logarithm transformation to the variable.
\item For "round", it rounds the variable's values to the nearest whole numbers.
}}

\item{inverse}{logical. Invert the transformation?}

\item{t_terms}{vector. c(a,b):
\itemize{
\item For "01", a = min(x), b = max(x).
\item For "zscore", a = mean(x), b = sd(x).
\item For "log" and "log1, not needed.
\item Can't invert "round" transformations.
}}
}
\value{
A data.frame or tibble with the transformed variable added as a new column.
The new column's name is the original variable name followed by an underscore and method name.
}
\description{
This function transforms the data in a tibble or SpatRaster object on the method specified
The available methods are "01", "zscore", "log", and "round".
}
\examples{
\dontrun{
require(dplyr)

data("sppabund")
# Select data for a single species
some_sp <- sppabund \%>\%
  dplyr::filter(species == "Species one") \%>\%
  dplyr::select(species, ind_ha, x, y)

# Transform abundance data to 0-1
some_sp_2 <- adm_transform(
  data = some_sp,
  variable = "ind_ha",
  method = "01"
)
some_sp_2

# Transform abundance data z-score
some_sp_2 <- adm_transform(
  data = some_sp,
  variable = "ind_ha",
  method = "zscore"
)
some_sp_2

# Transform abundance data log
some_sp_2 <- adm_transform(
  data = some_sp,
  variable = "ind_ha",
  method = "log"
)
some_sp_2

# Transform abundance data log
some_sp_2 <- adm_transform(
  data = some_sp,
  variable = "ind_ha",
  method = "round"
)
some_sp_2

# TODO Invert transformation

# TODO Transform raster data

}
}
